#!/usr/bin/env ruby

class Struct; def to_a; [self] end end # make `Array(photon)` work
Photon = Struct.new(:pos, :dir)
Pos = Struct.new(:x, :y)
Drn = Struct.new(:x, :y)

LEFT  = Drn.new(-1,0)
RIGHT = Drn.new(1,0)
UP    = Drn.new(0,-1)
DOWN  = Drn.new(0,1)

class Grid
  def initialize(lines)
    @lines = lines
    @mx = @lines.first.length - 1
    @my = @lines.length - 1

    @visited = Hash.new { |h,k| h[k] = [] }
  end

  def at(pos)
    @lines[pos.y][pos.x]
  end

  def move(photon)
    return nil if already_visited?(photon)
    mark_visited(photon)

    xx = photon.pos.x + photon.dir.x
    yy = photon.pos.y + photon.dir.y

    if xx < 0 || xx > @mx
      return nil
    end
    if yy < 0 || yy > @my
      return nil
    end

    newpos = Pos.new(xx, yy)

    case at(newpos)
    when '.'
      return Photon.new(newpos, photon.dir)

    when '\\'
      case photon.dir
      when RIGHT
        return Photon.new(newpos, DOWN)
      when LEFT
        return Photon.new(newpos, UP)
      when DOWN
        return Photon.new(newpos, RIGHT)
      when UP
        return Photon.new(newpos, LEFT)
      else
        raise RuntimeError, "mirror #{photon.dir}"
      end

    when '/'
      case photon.dir
      when RIGHT
        return Photon.new(newpos, UP)
      when LEFT
        return Photon.new(newpos, DOWN)
      when DOWN
        return Photon.new(newpos, LEFT)
      when UP
        return Photon.new(newpos, RIGHT)
      else
        raise RuntimeError, "mirror #{photon.dir}"
      end

    when '|'
      case photon.dir
      when RIGHT
        return [ Photon.new(newpos, UP), Photon.new(newpos, DOWN) ]
      when LEFT
        return [ Photon.new(newpos, UP), Photon.new(newpos, DOWN) ]
      when DOWN
        return Photon.new(newpos,photon.dir)
      when UP
        return Photon.new(newpos,photon.dir)
      else
        raise RuntimeError, "splitter #{photon.dir}"
      end

    when '-'
      case photon.dir
      when RIGHT
        return Photon.new(newpos,photon.dir)
      when LEFT
        return Photon.new(newpos,photon.dir)
      when DOWN
        return [ Photon.new(newpos, LEFT), Photon.new(newpos, RIGHT) ]
      when UP
        return [ Photon.new(newpos, LEFT), Photon.new(newpos, RIGHT) ]
      else
        raise RuntimeError, "splitter #{photon.dir}"
      end

    else
      raise RuntimeError, at(newpos)
    end

  end

  def traverse
    queue = [ Photon.new(Pos.new(-1,0), Drn.new(1,0)) ] # start off board

    while photon = queue.shift
      Array(move(photon)).reject(&:nil?).each { |d| queue.push(d) }
    end
  end

  def already_visited?(state)
    @visited [ state.pos ].include?(state.dir)
  end

  def mark_visited(state)
    @visited[ state.pos ] << state.dir
  end

  def count_visited
    @visited.values.select { |c| !c.empty? }.count - 1 # start off board
  end
end

lines = ARGF.readlines.map(&:chomp)
grid = Grid.new(lines)
grid.traverse
puts grid.count_visited # 6855
