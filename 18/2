#!/usr/bin/env ruby

_plan = ARGF.readlines.map(&:chomp)

Pos = Struct.new(:x, :y) do
  def shoelace(other)
    x * other.y - y * other.x
  end
end
Drn = Struct.new(:x, :y)

Deltas = {
  '0' => Drn.new(1,0),
  '1' => Drn.new(0,1),
  '2' => Drn.new(-1,0),
  '3' => Drn.new(0,-1),
}

pos = Pos.new(0,0)
points = [ pos ]

perimiter = 0
_plan.each do |p|
  _dist, dir = p.match(/#(\w{5})(\w)/)[1..2]
  dist = _dist.to_i(16)
  delta = Deltas[dir]

  pos = Pos.new(pos.x + dist*delta.x, pos.y + dist*delta.y)

  points << pos
  perimiter += dist
end

puts points.each_cons(2).sum { |p1,p2| p1.shoelace(p2) }.abs/2 + perimiter/2 + 1 # 147839570293376

__END__

https://rosettacode.org/wiki/Shoelace_formula_for_polygonal_area#Ruby
