#!/usr/bin/env ruby

instructions, stock = ARGF.readlines.map(&:chomp).slice_before("").to_a

workflows = {}
acc = []
rej = []

instructions.each do |inst|
  name, defn = inst.match(/^(\w+){(.*)}$/)[1..2]

  rules = []
  defn.split(',').each do |rule|
    cond, target = rule.split(":")
    if target.nil? # no cond
      rules.push( ->(s) { workflows[cond].call(s) } )
    else
      var, op, val = cond.match(/^(\w)(.)(\d+)/)[1..3]
      case op
      when '<'
        rules.push( ->(s) { workflows[target].call(s) if s[var.to_sym] < val.to_i ; s[var.to_sym] < val.to_i } )
      when '>'
        rules.push( ->(s) { workflows[target].call(s) if s[var.to_sym] > val.to_i ; s[var.to_sym] > val.to_i } )
      else
        raise RuntimeError, rule
      end
    end
  end
  workflows[name] = ->(s) { rules.take_while { |r| !r.call(s) } } # false == carry on
end

workflows['R'] = ->(s) { rej << s }
workflows['A'] = ->(s) { acc << s }

total = 0
stock.drop(1).each do |part|
  s = {}
  part.split(',').each do |bits|
    bit, num = bits.match(/(\w)=(\d+)/)[1..2]
    s[bit.to_sym] = num.to_i
  end

  workflows['in'].call(s)
end

puts acc.map { |a| a.values.sum }.sum # 382440

