#!/usr/bin/env ruby

instructions, stock = ARGF.readlines.map(&:chomp).slice_before("").to_a

workflows = {}
acc = []
rej = []

instructions.each do |inst|
  name, defn = inst.match(/^(\w+){(.*)}$/)[1..2]

  rules = []
  defn.split(',').each do |rule|
    cond, target = rule.split(":")
    if target.nil? # no cond
      rules.push( ->(s) { workflows[cond].call(s) } )
    else
      _var, op, _val = cond.match(/^(\w)(.)(\d+)/)[1..3]
      var = _var.to_sym
      val = _val.to_i
      case op
      when '<'
        rules.push( ->(s) {
          l = ( s[var].min .. (val - 1) )
          r = ( val .. s[var].max )

          nsl = s.dup ; nsl[var] = l
          nsr = s.dup ; nsr[var] = r

          workflows[target].call(nsl)
          nsr
        }
                  )
      when '>'
        rules.push( ->(s) {
          l = ( s[var].min .. val.to_i )
          r = ( (val + 1 ) .. s[var].max )

          nsl = s.dup ; nsl[var] = l
          nsr = s.dup ; nsr[var] = r

          workflows[target].call(nsr)
          nsl
        }
                  )
      else
        raise RuntimeError, rule
      end
    end
  end
  workflows[name] = ->(s) { rules.inject(s) { |s,r| s = r.call(s) } }
end

workflows['R'] = ->(s) { rej << s }
workflows['A'] = ->(s) { acc << s }

s = {
  :x => (1 .. 4000),
  :m => (1 .. 4000),
  :a => (1 .. 4000),
  :s => (1 .. 4000),
}

workflows['in'].call(s)

puts acc.map { |a| [:x, :m, :a, :s ].map { |s| a[s].size  }.inject(:*) }.sum # 136394217540123
